/******************************************************************************/
/* Sequences Interface.                                                       */
/******************************************************************************/
/* This source, or parts thereof, may be used in any software as long the     */
/* license of APlayer is keep. See the LICENSE file for more information.     */
/*                                                                            */
/* Copyright (C) 1998-2002 by The APlayer-Team.                               */
/* All rights reserved.                                                       */
/******************************************************************************/


// PolyKit headers
#include "POS.h"
#include "PString.h"
#include "PList.h"

// Player headers
#include "MEDTypes.h"
#include "Sequences.h"


/******************************************************************************/
/*                                                                            */
/* SectSeqEntry                                                               */
/*                                                                            */
/******************************************************************************/

/******************************************************************************/
/* Constructor                                                                */
/******************************************************************************/
SectSeqEntry::SectSeqEntry(PSEQ_NUM init)
{
	num = init;
}



/******************************************************************************/
/* operator PSEQ_NUM                                                          */
/******************************************************************************/
SectSeqEntry::operator PSEQ_NUM(void)
{
	return (num);
}



/******************************************************************************/
/* operator =                                                                 */
/******************************************************************************/
PSEQ_NUM SectSeqEntry::operator = (const PSEQ_NUM set)
{
	return (num = set);
}





/******************************************************************************/
/*                                                                            */
/* PlaySeqEntry                                                               */
/*                                                                            */
/******************************************************************************/

/******************************************************************************/
/* Constructor                                                                */
/******************************************************************************/
PlaySeqEntry::PlaySeqEntry(BLOCK_NUM init)
{
	num     = init;
	pSeqCmd = 0;
}



/******************************************************************************/
/* Destructor                                                                 */
/******************************************************************************/
PlaySeqEntry::~PlaySeqEntry(void)
{
}



/******************************************************************************/
/* IsCmd()                                                                    */
/******************************************************************************/
bool PlaySeqEntry::IsCmd(void) const
{
	return (pSeqCmd > 0);
}



/******************************************************************************/
/* GetCmd()                                                                   */
/******************************************************************************/
int32 PlaySeqEntry::GetCmd(void) const
{
	return (pSeqCmd);
}



/******************************************************************************/
/* SetCmd()                                                                   */
/******************************************************************************/
void PlaySeqEntry::SetCmd(int32 cmdNum, BLOCK_NUM cmdLevel)
{
	pSeqCmd = cmdNum;
	num     = cmdLevel;
}



/******************************************************************************/
/* operator BLOCK_NUM                                                         */
/******************************************************************************/
PlaySeqEntry::operator BLOCK_NUM(void)
{
	return (num);
}





/******************************************************************************/
/*                                                                            */
/* PlaySeq                                                                    */
/*                                                                            */
/******************************************************************************/

/******************************************************************************/
/* Destructor                                                                 */
/******************************************************************************/
PlaySeq::~PlaySeq(void)
{
	int32 i, count;

	count = CountItems();
	for (i = 0; i < count; i++)
		delete GetItem(i);
}



/******************************************************************************/
/* SetName()                                                                  */
/******************************************************************************/
void PlaySeq::SetName(const char *newName)
{
	PCharSet_Amiga charSet;

	name.SetString(newName, &charSet);
}
